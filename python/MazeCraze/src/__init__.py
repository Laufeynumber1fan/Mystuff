import cv2
import os
import sys
import numpy as np
import copy
from cell import *
from path import *

def main():
    '''
    if len(sys.argv) != 2:
        print("Need one argument.")
        return -1
    '''
    try:
        # img is a numpy array
        # len(img) is the x axis
        # len(img[0]) is the y axis
        # (x, y)
        # For example, img[0][0] = [255, 221, 81]
        # This corressponds to the RGB values, but BGR.
        # 81 - Blue
        # 221 - Green
        # 255 - Red
        #img = cv2.imread(sys.argv[1], cv2.IMREAD_COLOR)
        img = cv2.imread("C:\\Users\\12045\\Mystuff\\python\\MazeCraze\\images\snailmaze00.png", cv2.IMREAD_COLOR)
        grey_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    except FileNotFoundError:
        print("File not found.")
        return -1
    except:
        print("Invalid image")
        return -1
    
    '''
    # Remove the last x axis and the first y axis to make the img divisible by 8
    grey_img = grey_img[:-1] # remove last row
    grey_img = np.delete(grey_img, 0, axis=1) #remove first column
    '''
    
    # Using list.count(), this counts the occurrances of pixel greyscale colours.
    # The color with the highest occurrances is most likely the "blank" pixel
    # The color with the 2nd highest is most likely the "wall" pixel
    blank = 0
    wall = 0
    occurs = [0] * 256

    for y in grey_img:
        y = y.tolist()
        for occur in range(0, 256):
            occurs[occur] += y.count(occur)

    blank = occurs.index(max(occurs)) # save index of most occurences
    occurs[occurs.index(max(occurs))] = 0
    wall = occurs.index(max(occurs)) # save index of 2nd highest

    # Divide the image into a 9x9 square grid and assign each 9x9 pixel square attributes that describe passable walls
    # These squares are strictly logical and will not overwrite the np array generated by cv2
    # Reminder: [y][x]
    '''
    middle of square is (4, 4), (4, 5), (5, 4), (5, 5)
    '''
    # Generate an empty 2D list to fill with cells
    # rows then columns
    cells = [[None for _ in range(int(len(grey_img[0]) / 8))] for _ in range(int(len(grey_img) / 8))]
    valid = []

    for x, row in enumerate(grey_img):
        for y, px in enumerate(row):
            if x % 8 == 0 and y % 8 == 0:
                valid.append((x, y))

    for v in valid:
        x, y= v[0], v[1]
        try:
            # if out of bounds
            if (x + 8, y + 8) not in valid:
                continue

            cells[int(x/8)][int(y/8)] = cell(grey_img, (x, y), (x + 8, y + 8), blank, wall)
        except IndexError:
            pass

    # Determine the start and finish line of the maze
    snail = cv2.imread("C:\\Users\\12045\\Mystuff\\python\\MazeCraze\\images\\snail.png", cv2.IMREAD_GRAYSCALE)
    goal = cv2.imread("C:\\Users\\12045\\Mystuff\\python\\MazeCraze\\images\\goal.png", cv2.IMREAD_GRAYSCALE)

    # read grey_img from left to right then move to next line
    for x in range(0, len(cells)):
        for y in range(0, len(cells[0])):
            result = cells[x][y].is_special(grey_img, snail, goal)
            if result == "snail":
                start = (x, y)
            elif result == "goal":
                end = (x, y)
            elif isinstance(result, tuple):
                print("Consider tweaking the values on the if statements for line 70 and 77 on maze.py\nSNAIL {result[0]}, GOAL {result[1]}")

    # The image is now divided into 9x9 px squares with overlapping x, y coordinates.
    # cells has a row and column length based on the number of 9x9 squares
    # 
    # For example: cells[0][0] is the top left 9x9 square, (0, 0) is the top left corner and (8, 8) is the bottom right
    # cells[1][2] is 1 row below [0][0] and 2 cells to the right. (16, 8) is the top left, (16, 24) is the bottom right.
    # The image is now formatted to be more readable for routing algorithms.
    
    # direction = (0, 1, 2, 3)
    # LEFT TOP RIGHT BOTTOM
    # x, y = the coords of current cell
    #
    def pathing(x, y, cells, current_cell, current_path):
        for direction, route in enumerate(current_cell.valids):
                # set new coords to the next valid cell
                if route:
                    match direction:
                        case 0:
                            temp = (x, y - 1)
                        case 1:
                            temp = (x - 1, y)
                        case 2:
                            temp = (x, y + 1)
                        case 3:
                            temp = (x + 1, y)
                    
                    # if this cell previously not taken by this path
                    if temp not in current_path.route and current_cell.special is not False:
                        x, y = temp[0], temp[1]
                        # current_path.traverse() to record the paths taken
                        # (x, y) of the next valid cell
                        current_path.traverse((x, y))
                        
                        # clone the path object with different references in memory
                        new_path = copy.deepcopy(current_path)
                    
                        if cells[x][y].special != 'goal':
                            pathing(x, y, cells, cells[x][y], new_path)
                        else:
                            return current_path
                    # else this path is dead because it reached a dead end or is trying to double back
                    else:
                        # this cell is flagged as False and will not be used further on
                        cells[temp[0]][temp[1]].special = False
                        continue


    # %%
    starting_path = path(start, end)
    a = []
    a.append(pathing(15, 0, cells, cells[x][y], starting_path))
    print(a)

if __name__ == '__main__':
   main()
   print('Done!')

'''
import cv2
import os
import sys
import numpy as np

img = cv2.imread("C:\\Users\\12045\\Mystuff\\python\\MazeCraze\\images\snailmaze00.png", cv2.IMREAD_COLOR)
grey_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

os.chdir(r'C:\\Users\\12045\\Mystuff\\python\\MazeCraze\\debug\\')
cv2.imwrite('debug.png', img)
'''